# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AuthOut {
  accessToken: String
  accessTokenExpiry: DateTime
  errors: [UserError!]
}

input BookIn {
  day: Int!
  month: Int!
  year: Int!
}

type Booking {
  date: DateTime!
  id: String!
  user: User!
}

type BookingSlot {
  available: Boolean
  bookings: [Booking!]!
  date: DateTime!
  space: Space!
}

input ChangePasswordIn {
  newPassword: String!
  newPasswordConfirm: String!
}

type ChangePasswordOut {
  errors: [UserError!]
}

input CreateSpaceIn {
  maxBookingsPerDay: Int!
  name: String!
}

type CreateSpaceOut {
  errors: [UserError!]
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input ForgotPasswordIn {
  email: String!
}

type ForgotPasswordOut {
  errors: [UserError!]
  token: String
}

type JoinSpaceOut {
  errors: [UserError!]
  space: Space
}

input LoginIn {
  email: String!
  password: String!
}

type Mutation {
  book(input: BookIn!, spaceId: String!): Booking!
  cancelBooking(bookingId: String!): Boolean!
  changePassword(input: ChangePasswordIn!): ChangePasswordOut!
  createSpace(input: CreateSpaceIn!): CreateSpaceOut!
  forgotPassword(input: ForgotPasswordIn!): ForgotPasswordOut!
  joinSpace(code: String!): JoinSpaceOut!
  login(input: LoginIn!): AuthOut!
  logout: Boolean!
  refreshToken(input: RefreshTokenIn!): AuthOut!
  register(input: RegisterIn!): AuthOut!
  resetPassword(input: ResetPasswordIn!, token: String!): ResetPasswordOut!
  updateSpace(input: UpdateSpaceIn!, spaceId: String!): UpdateSpaceOut!
}

type Query {
  getBookings(spaceId: String!): [BookingSlot!]!
  getStatus: StatusResponse!
  isAuthenticated: Boolean!
  joinedSpaces: [Space!]!
  managerSpaces: [Space!]!
  spaceInfo(spaceId: String!): Space!
  userInfo: User!
}

input RefreshTokenIn {
  refreshToken: String!
}

input RegisterIn {
  email: String!
  fullName: String!
  password: String!
  role: String!
}

input ResetPasswordIn {
  password: String!
}

type ResetPasswordOut {
  errors: [UserError!]
}

type Role {
  value: String!
}

type Space {
  bookings: [Booking!]!
  code: String!
  id: String!
  manager: User!
  maxBookingsPerDay: Int!
  name: String!
  users: [User!]!
}

type StatusResponse {
  alive: Boolean!
}

input UpdateSpaceIn {
  maxBookingsPerDay: Int
  name: String
}

type UpdateSpaceOut {
  errors: [UserError!]
  space: Space
}

type User {
  email: String!
  fullName: String!
  id: String!
  password: String!
  roles: [Role!]!
}

type UserError {
  message: String!
  path: String
}
